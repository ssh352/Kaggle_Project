xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.carseats$k, cv.carseats$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
######################################################################
######################################################################
#####[09] Trees, Bagging, Random Forests, & Boosting Lecture Code#####
######################################################################
######################################################################
##############################
#####Classification Trees#####
##############################
#Loading the tree library for fitting classification and regression trees.
library(tree)
#Loading the ISLR library in order to use the Carseats dataset.
library(ISLR)
#Making data manipulation easier.
help(Carseats)
attach(Carseats)   ###
#Looking at the variable of interest, Sales.
hist(Sales)
summary(Sales)
#Creating a binary categorical variable High based on the continuous Sales
#variable and adding it to the original data frame.
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
#Fit a tree to the data; note that we are excluding Sales from the formula.
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
#The output shows the variables actually used within the tree, the number of
#terminal nodes, the residual mean deviance based on the Gini index, and
#the misclassification error rate.
#Plotting the classification tree.
plot(tree.carseats)
text(tree.carseats, pretty = 0) #Yields category names instead of dummy variables.
#Detailed information for the splits of the classification tree.
tree.carseats
#The output shows the variables used at each node, the split rule, the number
#of observations at each node, the deviance based on the Gini index, the
#majority class value based on the observations in the node, and the associated
#probabilities of class membership at each node. Terminal nodes are denoted
#by asterisks.
#Splitting the data into training and test sets by an 70% - 30% split.
set.seed(0)
train = sample(1:nrow(Carseats), 7*nrow(Carseats)/10) #Training indices.
Carseats.test = Carseats[-train, ] #Test dataset.
High.test = High[-train] #Test response.
#Ftting and visualizing a classification tree to the training data.
tree.carseats = tree(High ~ . - Sales, data = Carseats, subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
summary(tree.carseats)
tree.carseats
#Using the trained decision tree to classify the test data.
tree.pred = predict(tree.carseats, Carseats.test, type = "class")
tree.pred
#Assessing the accuracy of the overall tree by constructing a confusion matrix.
table(tree.pred, High.test)
(60 + 42)/120
#Performing cross-validation in order to decide how many splits to prune; using
#misclassification as the basis for pruning.
set.seed(0)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
#Inspecting the elements of the cv.tree() object.
names(cv.carseats)
cv.carseats
#Size indicates the number of terminal nodes. Deviance is the criterion we
#specify; in this case it is the misclassification rate. K is analogous to the
#cost complexity tuning parameter alpha. Method indicates the specified criterion.
#Visually inspecting the results of the cross-validation by considering tree
#complexity.
par(mfrow = c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.carseats$k, cv.carseats$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0) #Yields category names instead of dummy variables.
tree.carseats
set.seed(0)
train = sample(1:nrow(Carseats), 7*nrow(Carseats)/10) #Training indices.
Carseats.test = Carseats[-train, ] #Test dataset.
High.test = High[-train] #Test response.
tree.carseats = tree(High ~ . - Sales, data = Carseats, subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
summary(tree.carseats)
tree.carseats
tree.pred = predict(tree.carseats, Carseats.test, type = "class")
tree.pred
table(tree.pred, High.test)
(60 + 42)/120
set.seed(0)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.carseats$k, cv.carseats$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
par(mfrow = c(1, 1))
prune.carseats = prune.misclass(tree.carseats, best = 4)
plot(prune.carseats)
text(prune.carseats, pretty = 0)
tree.pred = predict(prune.carseats, Carseats.test, type = "class")
table(tree.pred, High.test)
(53 + 33)/120
library(MASS)
help(Boston)
set.seed(0)
train = sample(1:nrow(Boston), 7*nrow(Boston)/10)
tree.boston = tree(medv ~ ., Boston, subset = train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty = 0)
set.seed(0)
cv.boston = cv.tree(tree.boston)
par(mfrow = c(1, 2))
plot(cv.boston$size, cv.boston$dev, type = "b",
xlab = "Terminal Nodes", ylab = "RSS")
plot(cv.boston$k, cv.boston$dev, type  = "b",
xlab = "Alpha", ylab = "RSS")
prune.boston = prune.tree(tree.boston, best = 4)
par(mfrow = c(1, 1))
plot(prune.boston)
text(prune.boston, pretty = 0)
yhat = predict(tree.boston, newdata = Boston[-train, ])
yhat
boston.test = Boston[-train, "medv"]
boston.test
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
yhat = predict(prune.boston, newdata = Boston[-train, ])
yhat
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
set.seed(0)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
library(randomForest)
set.seed(0)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
rf.boston
?ramdonForest
set.seed(0)
oob.err = numeric(13)
for (mtry in 1:13) {
fit = randomForest(medv ~ ., data = Boston[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
}
plot(1:13, oob.err, pch = 16, type = "b",
xlab = "Variables Considered at Each Split",
ylab = "OOB Mean Squared Error",
main = "Random Forest OOB Error Rates\nby # of Variables")
rf.boston
fit$mse
oob.err = numeric(13)
oob.err
oob.err[mtry] = fit$mse[500]
for (mtry in 1:13) {
fit = randomForest(medv ~ ., data = Boston[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
}
importance(rf.boston)
varImpPlot(rf.boston)
importance(rf.boston, type = 1)
varImpPlot(rf.boston, type = 1)
?randomForest
install.packages("gbm")
library(gbm)
?gbm
set.seed(0)
boost.boston = gbm(medv ~ ., data = Boston[train, ],
distribution = "gaussian",
n.trees = 10000,
interaction.depth = 4)
par(mfrow = c(1, 1))
summary(boost.boston)
?gbm
par(mfrow = c(1, 2))
plot(boost.boston, i = "rm")
plot(boost.boston, i = "lstat")
par(mfrow = c(1, 1))
summary(boost.boston)
summary(boost.boston)
par(mfrow = c(1, 2))
plot(boost.boston, i = "rm")
plot(boost.boston, i = "lstat")
n.trees = seq(from = 100, to = 10000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
dim(predmat)
par(mfrow = c(1, 1))
berr = with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
plot(n.trees, berr, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
abline(h = min(oob.err), col = "red")
predmat - medv
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
medv
predmat
Boston$medv
dim(predmat)
n.trees = seq(from = 100, to = 100000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 20000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 11000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 10000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
dim(predmat)
par(mfrow = c(1, 1))
berr = with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
plot(n.trees, berr, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
boost.boston2 = gbm(medv ~ ., data = Boston[train, ],
distribution = "gaussian",
n.trees = 10000,
interaction.depth = 4,
shrinkage = 0.1)
predmat2 = predict(boost.boston2, newdata = Boston[-train, ], n.trees = n.trees)
berr2 = with(Boston[-train, ], apply((predmat2 - medv)^2, 2, mean))
plot(n.trees, berr2, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
?gbm
iris.meas = iris[, -5]
summary(iris.meas)
sapply(iris.meas, sd)
iris.scale = as.data.frame(scale(iris.meas))
summary(iris.scale)
sapply(iris.scale, sd)
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Scaled Iris Data")
set.seed(0)
km.iris = kmeans(iris.scale, centers = 3)
km.iris
par(mfrow = c(1, 2))
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "True Species", col = iris$Species)
par(mfrow = c(1, 1))
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
points(km.iris$centers[, 4], km.iris$centers[, 2], pch = 16, col = "blue")
wssplot = function(data, nc = 15, seed = 0) {
wss = (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] = sum(kmeans(data, centers = i, iter.max = 100, nstart = 100)$withinss)
}
plot(1:nc, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within-Cluster Variance",
main = "Scree Plot for the K-Means Procedure")
}
wssplot(iris.scale)
faithful.scale = scale(faithful)
summary(faithful.scale)
?faithful
par(mfrow = c(1, 1))
plot(faithful.scale)
wssplot(faithful.scale)
set.seed(0)
km.faithful1 = kmeans(faithful.scale, centers = 3) #Running the K-means procedure
km.faithful2 = kmeans(faithful.scale, centers = 3) #5 different times, but with
km.faithful3 = kmeans(faithful.scale, centers = 3) #only one convergence of the
km.faithful4 = kmeans(faithful.scale, centers = 3) #algorithm each time.
km.faithful5 = kmeans(faithful.scale, centers = 3)
set.seed(0)
km.faithfulsim = kmeans(faithful.scale, centers = 3, nstart = 100)
par(mfrow = c(2, 3))
plot(faithful, col = km.faithful1$cluster,
main = paste("Single K-Means Attempt #1\n WCV: ",
round(km.faithful1$tot.withinss, 4)))
plot(faithful, col = km.faithful2$cluster,
main = paste("Single K-Means Attempt #2\n WCV: ",
round(km.faithful2$tot.withinss, 4)))
plot(faithful, col = km.faithful3$cluster,
main = paste("Single K-Means Attempt #3\n WCV: ",
round(km.faithful3$tot.withinss, 4)))
plot(faithful, col = km.faithful4$cluster,
main = paste("Single K-Means Attempt #4\n WCV: ",
round(km.faithful4$tot.withinss, 4)))
plot(faithful, col = km.faithful5$cluster,
main = paste("Single K-Means Attempt #5\n WCV: ",
round(km.faithful5$tot.withinss, 4)))
plot(faithful, col = km.faithfulsim$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km.faithfulsim$tot.withinss, 4)))
library(ISLR)
data(OJ)
str(OJ)
model1 = tree(Purchase ~ ., split = "gini", data = OJ)
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = OJ)
train <- OJ[train_index, ]
test <- OJ[test_index, ]
model1 = tree(Purchase ~ ., split = "gini", data = train)
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = train)
train <- OJ[train_index, ]
test <- OJ[test_index, ]
set.seed(0)
train_index <- sample(1:nrow(OJ), 8*nrow(OJ)/10)
test_index <- -train_index
train <- OJ[train_index, ]
test <- OJ[test_index, ]
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = train)
summary(model1)
1 - 0.1449
model1.pred <- predict(model1, test[, -1], type = "class")
table(model1.pred, test[, 1])
a <- c('a', 'b')
b <- c:2
b <- 1:2
table(a, b)
(106 + 59)/dim(OJ)[1]
dim(OJ)[1]
(106 + 59)/dim(test)[1]
set.seed(0)
cv.model2 <- cv.tree(model1, FUN = prune.misclass)
par(mfrow = c(1, 2))
plot(cv.model2$size, cv.model2$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.model2$k, cv.model2$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
names(cv.model2)
cv.model2
library(data.table)
library(Matrix)
library(xgboost)
library(Metrics)
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
setwd("C:/Users/Xinyuan Wu/Desktop/Xinyuan's Repo/Kaggle_Project")
train_full <- read.csv("data/train.csv/train.csv")
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(caret))
train_full <- train_full %>% select(-id)
dmcat_train_full <- model.matrix(~ . + 0, data = cat_train_full,
contrasts.arg = lapply(cat_train_full,
contrasts, contrasts = FALSE))
cat_train_full <- train_full[, 1:116]
dmcat_train_full <- model.matrix(~ . + 0, data = cat_train_full,
contrasts.arg = lapply(cat_train_full,
contrasts, contrasts = FALSE))
preProc_obj <- preProcess(dmcat_train_full, method = "nzv"); preProc_obj
dmcat_train_full_proc <- as.data.frame(dmcat_train_full_proc)
dmcat_train_full_proc <- predict(preProc_obj, dmcat_train_full); dim(dmcat_train_full_proc)
dmcat_train_full_proc <- as.data.frame(dmcat_train_full_proc)
submit <- read.csv("data/test.csv/test.csv")
num_submit <- submit[, -c(1:117)]
train_full_id <- train_full[, 1]
submit_id <- submit[, 1]
submit <- submit %>% select(-id)
cat_submit <- submit[, 1:116]
dmcat_submit <- model.matrix(~ . + 0, data = cat_submit,
contrasts.arg = lapply(cat_submit,
contrasts, contrasts = FALSE))
find_same_col <- function(subset, fullset) {
for (i in colnames(fullset)) {
if (!(i %in% colnames(subset))) {
fullset <- fullset[, -which(colnames(fullset) == i)]
}
}
return(fullset)
}
dmcat_submit_proc <- find_same_col(dmcat_train_full_proc, as.data.frame(dmcat_submit))
train_full_processed <- data.frame(id = train_full_id,
dmcat_train_full_proc,
train[, 117:131])
train_full_processed <- data.frame(id = train_full_id,
dmcat_train_full_proc,
train_full[, 117:131])
submit_processed <- data.frame(id = submit_id,
dmcat_submit_proc,
submit[, 117:130])
set.seed(520)
train_index <- sample(1:nrow(train_full), 6*nrow(train_full)/10)
set.seed(520)
train_index <- sort(sample(1:nrow(train_full), 6*nrow(train_full)/10))
test_index <- -train_index
train_encode1 <- train_full_processed[train_index, ]
test_encode1 <- train_full_processed[test_index, ]
dim(train_encode1)
dim(test_encode1)
submit <- submit_processed
names(train_encode1)
names(test_encode1)
submit_encode1 <- submit_processed
names(test_encode1)
names(submit_encode1)
dim(submit_encode1)
dim(test_encode1)
dim(train_encode1)
test_encode1 <- train_full_processed[test_index, -195]
dim(test_encode1)
names(test_encode1)
write.csv(train_encode1, file = 'train.csv', row.names = F)
write.csv(test_encode1, file = 'test.csv', row.names = F)
train_full_id
str(train_full)
setwd("C:/Users/Xinyuan Wu/Desktop/Xinyuan's Repo/Kaggle_Project")
train_full <- read.csv("data/train.csv/train.csv")
submit <- read.csv("data/test.csv/test.csv")
num_train_full <- train_full[, -c(1: 117, 132)]
num_submit <- submit[, -c(1:117)]
train_full_id <- train_full[, 1]
submit_id <- submit[, 1]
head(train_full_id)
head(submit_id)
train_full_processed <- data.frame(id = train_full_id,
dmcat_train_full_proc,
train_full[, 117:131])
submit_processed <- data.frame(id = submit_id,
dmcat_submit_proc,
submit[, 117:130])
set.seed(520)
train_index <- sort(sample(1:nrow(train_full), 6*nrow(train_full)/10))
test_index <- -train_index
train_encode1 <- train_full_processed[train_index, ]
test_encode1 <- train_full_processed[test_index, -195]
submit_encode1 <- submit_processed
write.csv(train_encode1, file = 'train.csv', row.names = F)
write.csv(test_encode1, file = 'test.csv', row.names = F)
str(train_encode1)
str(test_encode1)
names(train_encode1)
names(test_encode1)
str(train_full)
str(train_full, ncol = len(train_full))
str(train_full, ncol = length(train_full))
str(train_full, ncol = length(train_full))
str(train_encode1, list.len = ncol(train_encode1))
str(train_full, list.len = ncol(train_full))
str(submit, list.len = ncol(submit))
train_full_processed <- data.frame(id = train_full_id,
dmcat_train_full_proc,
train_full[, 118:132])
submit_processed <- data.frame(id = submit_id,
dmcat_submit_proc,
submit[, 118:131])
set.seed(520)
train_index <- sort(sample(1:nrow(train_full), 6*nrow(train_full)/10))
test_index <- -train_index
train_encode1 <- train_full_processed[train_index, ]
str(train_full_processed)
names(train_full[, 118:132])
names(train_full_processed)
set.seed(520)
train_index <- sort(sample(1:nrow(train_full), 6*nrow(train_full)/10))
test_index <- -train_index
train_encode1 <- train_full_processed[train_index, ]
test_encode1 <- train_full_processed[test_index, -195]
submit_encode1 <- submit_processed
names(test_encode1)
write.csv(train_encode1, file = 'train.csv', row.names = F)
write.csv(test_encode1, file = 'test.csv', row.names = F)
names(train_full_processed)
str(train_full)
train_nn <- train_full[train_index, ]
test_nn <- train_full[test_index, -132]
str(train_nn)
str(test_nn)
write.csv(train_nn, file = 'train.csv', row.names = F)
write.csv(test_nn, file = 'test.csv', row.names = F)
