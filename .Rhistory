#Visually inspecting the results of the cross-validation by considering tree
#complexity.
par(mfrow = c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.carseats$k, cv.carseats$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
library(tree)
library(ISLR)
help(Carseats)
attach(Carseats)   ###
hist(Sales)
summary(Sales)
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0) #Yields category names instead of dummy variables.
tree.carseats
set.seed(0)
train = sample(1:nrow(Carseats), 7*nrow(Carseats)/10) #Training indices.
Carseats.test = Carseats[-train, ] #Test dataset.
High.test = High[-train] #Test response.
tree.carseats = tree(High ~ . - Sales, data = Carseats, subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
summary(tree.carseats)
tree.carseats
tree.pred = predict(tree.carseats, Carseats.test, type = "class")
tree.pred
table(tree.pred, High.test)
(60 + 42)/120
set.seed(0)
cv.carseats = cv.tree(tree.carseats, FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1, 2))
plot(cv.carseats$size, cv.carseats$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.carseats$k, cv.carseats$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
par(mfrow = c(1, 1))
prune.carseats = prune.misclass(tree.carseats, best = 4)
plot(prune.carseats)
text(prune.carseats, pretty = 0)
tree.pred = predict(prune.carseats, Carseats.test, type = "class")
table(tree.pred, High.test)
(53 + 33)/120
library(MASS)
help(Boston)
set.seed(0)
train = sample(1:nrow(Boston), 7*nrow(Boston)/10)
tree.boston = tree(medv ~ ., Boston, subset = train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty = 0)
set.seed(0)
cv.boston = cv.tree(tree.boston)
par(mfrow = c(1, 2))
plot(cv.boston$size, cv.boston$dev, type = "b",
xlab = "Terminal Nodes", ylab = "RSS")
plot(cv.boston$k, cv.boston$dev, type  = "b",
xlab = "Alpha", ylab = "RSS")
prune.boston = prune.tree(tree.boston, best = 4)
par(mfrow = c(1, 1))
plot(prune.boston)
text(prune.boston, pretty = 0)
yhat = predict(tree.boston, newdata = Boston[-train, ])
yhat
boston.test = Boston[-train, "medv"]
boston.test
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
yhat = predict(prune.boston, newdata = Boston[-train, ])
yhat
plot(yhat, boston.test)
abline(0, 1)
mean((yhat - boston.test)^2)
set.seed(0)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
library(randomForest)
set.seed(0)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
rf.boston
?ramdonForest
set.seed(0)
oob.err = numeric(13)
for (mtry in 1:13) {
fit = randomForest(medv ~ ., data = Boston[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
}
plot(1:13, oob.err, pch = 16, type = "b",
xlab = "Variables Considered at Each Split",
ylab = "OOB Mean Squared Error",
main = "Random Forest OOB Error Rates\nby # of Variables")
rf.boston
fit$mse
oob.err = numeric(13)
oob.err
oob.err[mtry] = fit$mse[500]
for (mtry in 1:13) {
fit = randomForest(medv ~ ., data = Boston[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
}
importance(rf.boston)
varImpPlot(rf.boston)
importance(rf.boston, type = 1)
varImpPlot(rf.boston, type = 1)
?randomForest
install.packages("gbm")
library(gbm)
?gbm
set.seed(0)
boost.boston = gbm(medv ~ ., data = Boston[train, ],
distribution = "gaussian",
n.trees = 10000,
interaction.depth = 4)
par(mfrow = c(1, 1))
summary(boost.boston)
?gbm
par(mfrow = c(1, 2))
plot(boost.boston, i = "rm")
plot(boost.boston, i = "lstat")
par(mfrow = c(1, 1))
summary(boost.boston)
summary(boost.boston)
par(mfrow = c(1, 2))
plot(boost.boston, i = "rm")
plot(boost.boston, i = "lstat")
n.trees = seq(from = 100, to = 10000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
dim(predmat)
par(mfrow = c(1, 1))
berr = with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
plot(n.trees, berr, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
abline(h = min(oob.err), col = "red")
predmat - medv
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
medv
predmat
Boston$medv
dim(predmat)
n.trees = seq(from = 100, to = 100000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 20000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 11000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
n.trees = seq(from = 100, to = 10000, by = 100)
predmat = predict(boost.boston, newdata = Boston[-train, ], n.trees = n.trees)
dim(predmat)
par(mfrow = c(1, 1))
berr = with(Boston[-train, ], apply((predmat - medv)^2, 2, mean))
plot(n.trees, berr, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
boost.boston2 = gbm(medv ~ ., data = Boston[train, ],
distribution = "gaussian",
n.trees = 10000,
interaction.depth = 4,
shrinkage = 0.1)
predmat2 = predict(boost.boston2, newdata = Boston[-train, ], n.trees = n.trees)
berr2 = with(Boston[-train, ], apply((predmat2 - medv)^2, 2, mean))
plot(n.trees, berr2, pch = 16,
ylab = "Mean Squared Error",
xlab = "# Trees",
main = "Boosting Test Error")
?gbm
iris.meas = iris[, -5]
summary(iris.meas)
sapply(iris.meas, sd)
iris.scale = as.data.frame(scale(iris.meas))
summary(iris.scale)
sapply(iris.scale, sd)
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Scaled Iris Data")
set.seed(0)
km.iris = kmeans(iris.scale, centers = 3)
km.iris
par(mfrow = c(1, 2))
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "True Species", col = iris$Species)
par(mfrow = c(1, 1))
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
points(km.iris$centers[, 4], km.iris$centers[, 2], pch = 16, col = "blue")
wssplot = function(data, nc = 15, seed = 0) {
wss = (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:nc) {
set.seed(seed)
wss[i] = sum(kmeans(data, centers = i, iter.max = 100, nstart = 100)$withinss)
}
plot(1:nc, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within-Cluster Variance",
main = "Scree Plot for the K-Means Procedure")
}
wssplot(iris.scale)
faithful.scale = scale(faithful)
summary(faithful.scale)
?faithful
par(mfrow = c(1, 1))
plot(faithful.scale)
wssplot(faithful.scale)
set.seed(0)
km.faithful1 = kmeans(faithful.scale, centers = 3) #Running the K-means procedure
km.faithful2 = kmeans(faithful.scale, centers = 3) #5 different times, but with
km.faithful3 = kmeans(faithful.scale, centers = 3) #only one convergence of the
km.faithful4 = kmeans(faithful.scale, centers = 3) #algorithm each time.
km.faithful5 = kmeans(faithful.scale, centers = 3)
set.seed(0)
km.faithfulsim = kmeans(faithful.scale, centers = 3, nstart = 100)
par(mfrow = c(2, 3))
plot(faithful, col = km.faithful1$cluster,
main = paste("Single K-Means Attempt #1\n WCV: ",
round(km.faithful1$tot.withinss, 4)))
plot(faithful, col = km.faithful2$cluster,
main = paste("Single K-Means Attempt #2\n WCV: ",
round(km.faithful2$tot.withinss, 4)))
plot(faithful, col = km.faithful3$cluster,
main = paste("Single K-Means Attempt #3\n WCV: ",
round(km.faithful3$tot.withinss, 4)))
plot(faithful, col = km.faithful4$cluster,
main = paste("Single K-Means Attempt #4\n WCV: ",
round(km.faithful4$tot.withinss, 4)))
plot(faithful, col = km.faithful5$cluster,
main = paste("Single K-Means Attempt #5\n WCV: ",
round(km.faithful5$tot.withinss, 4)))
plot(faithful, col = km.faithfulsim$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km.faithfulsim$tot.withinss, 4)))
library(ISLR)
data(OJ)
str(OJ)
model1 = tree(Purchase ~ ., split = "gini", data = OJ)
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = OJ)
train <- OJ[train_index, ]
test <- OJ[test_index, ]
model1 = tree(Purchase ~ ., split = "gini", data = train)
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = train)
train <- OJ[train_index, ]
test <- OJ[test_index, ]
set.seed(0)
train_index <- sample(1:nrow(OJ), 8*nrow(OJ)/10)
test_index <- -train_index
train <- OJ[train_index, ]
test <- OJ[test_index, ]
library(tree)
model1 = tree(Purchase ~ ., split = "gini", data = train)
summary(model1)
1 - 0.1449
model1.pred <- predict(model1, test[, -1], type = "class")
table(model1.pred, test[, 1])
a <- c('a', 'b')
b <- c:2
b <- 1:2
table(a, b)
(106 + 59)/dim(OJ)[1]
dim(OJ)[1]
(106 + 59)/dim(test)[1]
set.seed(0)
cv.model2 <- cv.tree(model1, FUN = prune.misclass)
par(mfrow = c(1, 2))
plot(cv.model2$size, cv.model2$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.model2$k, cv.model2$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
names(cv.model2)
cv.model2
library(ISLR)
data(OJ)
set.seed(0)
train_index <- sample(1:nrow(OJ), 8*nrow(OJ)/10)
test_index <- -train_index
train <- OJ[train_index, ]
test <- OJ[test_index, ]
library(tree)
model1 <- tree(Purchase ~ ., split = "gini", data = train)
summary(model1) ### there are 86 terminal nodes
model1.pred <- predict(model1, test[, -1], type = "class")
table(model1.pred, test[, 1])   ### (106 + 59)/dim(test)[1] = 0.77
set.seed(0)
cv.model2 <- cv.tree(model1, FUN = prune.misclass)
par(mfrow = c(1, 2))
plot(cv.model2$size, cv.model2$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.model2$k, cv.model2$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
cv.model2
which(cv.model2$dev == min(cv.model2$dev))
cv.model2$size[which(cv.model2$dev == min(cv.model2$dev))]
prune.model3 = prune.misclass(model1, best = 11)
model3.pred <- predict(model3, test[, -1], type = "class")
model3 = prune.misclass(model1, best = 11)
which(cv.model2$dev == min(cv.model2$dev))   ### 11 terminal nodes
model3.pred <- predict(model3, test[, -1], type = "class")
table(model3.pred, test[, 1])
(113 + 57)/dim(test)[1]
par(mfrow = c(1, 1))
plot(model3)
text(model3, pretty = 0)
par(mfrow = c(1, 1))
plot(model3)
text(model3, pretty = 1)
summary(model3)
1 - 171/856
set.seed(0)
model4 <- randomForest(Purchase ~ ., data = OJ, subset = train_index, importance = TRUE)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
library(randomForest)
set.seed(0)
model4 <- randomForest(Purchase ~ ., data = OJ, subset = train_index, importance = TRUE)
model4
(447 + 239)/dim(train)[1]
model4.pred <- predict(model4, test[, -1], type = "class")
table(model4.pred, test[, 1])   ### (113 + 57)/dim(test)[1] = 0.79
(113 + 60)/dim(test)[1]
(113 + 57)/dim(test)[1]
summary(model3)
set.seed(0)
rf.boston = randomForest(medv ~ ., data = Boston, subset = train, importance = TRUE)
importance(model4, type = 1)
dim(OJ)
mode4$err.rate
model4$err.rate
class(model4$err.rate)
head(model4$err.rate)
names(model4)
str(OJ)
summary(model4)
model4
plot(1:17, oob.err, pch = 16, type = "b",
xlab = "Variables Considered at Each Split",
ylab = "OOB Mean Squared Error",
main = "Random Forest OOB Error Rates\nby # of Variables")
set.seed(0)
oob.err = numeric(17)
for (mtry in 1:17) {
fit = randomForest(Purchase ~ ., data = ,train, mtry = mtry)
oob.err[mtry] = fit$err.rate[500, 1]
cat("We're performing iteration", mtry, "\n")
}
plot(1:17, oob.err, pch = 16, type = "b",
xlab = "Variables Considered at Each Split",
ylab = "OOB Mean Squared Error",
main = "Random Forest OOB Error Rates\nby # of Variables")
1 - min(oob.err)
1:17[which(oob.err == min(oob.err))]
(1:17)[which(oob.err == min(oob.err))]
model4
set.seed(0)
oob.err = numeric(17)
for (mtry in 1:17) {
fit = randomForest(Purchase ~ ., data = train, mtry = mtry)
oob.err[mtry] = fit$err.rate[500, 1]
cat("We're performing iteration", mtry, "\n")
}
plot(1:17, oob.err, pch = 16, type = "b",
xlab = "Variables Considered at Each Split",
ylab = "OOB Mean Squared Error",
main = "Random Forest OOB Error Rates\nby # of Variables")
set.seed(0)
model5 <- randomForest(Purchase ~ ., data = train, mtry = 2)
model5
1 - 0.1939
model5.pred <- predict(model5, test[, -1], type = "class")
table(model5.pred, test[, 1])   ### (113 + 60)/dim(test)[1] = 80.8%
(118 + 58)/dim(test)[1]
OJ.train.indicator = train
OJ.test.indicator = test
as.vector(train$Purchase, mode = "numeric")
OJ.train.indicator$Purchase = as.vector(train$Purchase, mode = "numeric") - 1
OJ.test.indicator$Purchase = as.vector(test$Purchase, mode = "numeric") - 1
library(gbm)
boost.boston = gbm(Purchase ~ ., data = OJ.train.indicator,
distribution = " Bernoulli",
n.trees = 10000,
interaction.depth = 4,
shrinkage = 0.001)
?gbm
boost.boston = gbm(Purchase ~ ., data = OJ.train.indicator,
distribution = "bernoulli",
n.trees = 10000,
interaction.depth = 4,
shrinkage = 0.001)
n.trees = seq(from = 100, to = 10000, by = 100)
model6 = gbm(Purchase ~ ., data = OJ.train.indicator,
distribution = "bernoulli",
n.trees = 10000,
interaction.depth = 4,
shrinkage = 0.001)
n.trees = seq(from = 100, to = 10000, by = 100)
predmat = predict(model6, newdata = OJ.test.indicator[, -1], n.trees = n.trees)
predmat[, 1]
predmat = predict(model6, newdata = OJ.test.indicator[, -1],
type = "response", n.trees = n.trees)
predmat[, 1]
?predict
round(predmat, 0)
predmat.round <- round(predmat, 0)
predmat.round[, 1]
predmat.round <- round(predmat, 1)
predmat.round[, 1]
predmat.round <- round(predmat, 0)
n.trees
table(predmat.round[, 1], OJ.test.indicator[, 1])
dim(OJ.test.indicator)
table(predmat.round[, 1], OJ.test.indicator[, 1])[2, 2]
class(table(predmat.round[, 1], OJ.test.indicator[, 1]))
table(predmat.round[, 1], OJ.test.indicator[, 1])[1]
table(predmat.round[, 1], OJ.test.indicator[, 1])[2]
table(predmat.round[, 2], OJ.test.indicator[, 1])
table(predmat.round[, 3], OJ.test.indicator[, 1])
table(predmat.round[, 3], OJ.test.indicator[, 1])[1, 1]
ifelse(predmat.round[, 1] - OJ.test.indicator[, 1] == 0, 1, 0)
sum(ifelse(predmat.round[, 1] - OJ.test.indicator[, 1] == 0, 1, 0))
str(OJ)
str(OJ.test.indicator)
err.rate = with(OJ.test.indicator, sapply(predmat - Purchase,
function(x) ifelse(x == 0, 1, 0)))
err.rate
err.rate = with(OJ.test.indicator, sapply(predmat.round - Purchase,
function(x) ifelse(x == 0, 1, 0)))
err.rate
dim(test)
err.rate = with(OJ.test.indicator, sapply(predmat.round - Purchase,
function(x) sum(ifelse(x == 0, 1, 0))/214))
err.rate
predmat.round - Purchase
predmat.round - OJ.test.indicator[, 1]
sum(ifelse(predmat.round[, 1] - OJ.test.indicator[, 1] == 0, 1, 0))
sum(ifelse(predmat.round[, 1] - OJ.test.indicator[, 1] == 0, 1, 0))/214
err.rate = sapply(predmat.round - OJ.test.indicator[, 1],
function(x) sum(ifelse(x == 0, 1, 0))/214)
err.rate
sum(predmat.round[, 1] - OJ.test.indicator[, 1])
x <- predmat.round[, 1] - OJ.test.indicator[, 1]
x
predmat.round[, 1]
x <- predmat.round - OJ.test.indicator[, 1]
x
sapply(x, function(x) sum(ifelse(x == 0, 1, 0)))
ifelse(x == 0, 1, 0)
ifelse(x[, 1] == 0, 1, 0)
sum(ifelse(x[, 1] == 0, 1, 0))
err.rate = sapply(data.frame(predmat.round - OJ.test.indicator[, 1]),
function(x) sum(ifelse(x == 0, 1, 0))/214)
err.rate
class(err.rate)
plot(n.trees, err.rate, pch = 16,
ylab = "Accuracy",
xlab = "# Trees",
main = "Boosting Test Accuracy vs. Number of Trees")
range(err.rate)
ntrees[which(err.rate == max(err.rate))]
n.trees[which(err.rate == max(err.rate))]
abline(h = max(err.rate), col = "red")
(118 + 58)/dim(test)[1]
(113 + 57)/dim(test)[1]
abline(h = 0.822, col = "blue")
abline(h = 0.794, col = "green")
accuracy.all = sapply(data.frame(predmat.round - OJ.test.indicator[, 1]),
function(x) sum(ifelse(x == 0, 1, 0))/214)
n.trees[which(accuracy.all == max(accuracy.all))]   ### at least 2800 trees
par(mfrow = c(1, 1))
plot(n.trees, accuracy.all, pch = 16,
ylab = "Accuracy",
xlab = "# Trees",
main = "Boosting Test Accuracy vs. Number of Trees")
abline(h = max(err.rate), col = "red")   ### boosting
abline(h = 0.822, col = "blue")   ### best rf
abline(h = 0.794, col = "green")   ### best pruned single tree
setwd("C:/Users/Xinyuan Wu/Desktop/Xinyuan's Repo/Kaggle_Project")
train <- read.csv("data/train.csv/train.csv")
str(train)
?gbm
